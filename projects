<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Projects | Data Analytics Portfolio</title>
  <meta name="description" content="Data analytics projects by Yiying Huang" />
  <link rel="stylesheet" href="assets/style.css" />
</head>
<body>
  <!-- Header（沿用你的导航） -->
  <header class="site-header">
    <a class="brand" href="./index.html">YIYING HUANG</a>
    <nav class="nav">
      <a href="./index.html">Home</a>
      <a class="active" href="./projects.html">Projects</a>
      <a href="./about.html">About</a>
      <a href="./contact.html">Contact</a>
    </nav>
  </header>

  <main class="container">
    <!-- Intro -->
    <section class="page-intro">
      <h1>Projects</h1>
      <p>Selected data analytics projects. Each card shows a short summary, the tech stack I used, an expandable core code snippet, and a few charts.</p>
    </section>

    <!-- Project list -->
    <section class="grid projects-grid">

      <!-- Project 1 -->
      <article class="project-card">
        <div class="project-head">
          <h2>Customer Churn Prediction</h2>
          <p class="muted">Binary classification · Telco dataset</p>
        </div>

        <p class="project-blurb">
          Built a churn model to identify high-risk customers and key drivers. Tuned XGBoost and interpreted with SHAP; improved recall @ fixed precision by 18%.
        </p>

        <ul class="tech-tags">
          <li>Python</li><li>pandas</li><li>scikit-learn</li><li>XGBoost</li><li>SHAP</li>
        </ul>

        <div class="actions">
          <a class="btn" href="https://github.com/yourname/churn" target="_blank" rel="noopener">GitHub Repo</a>
          <a class="btn ghost" href="#" target="_blank" rel="noopener">Short Report (PDF)</a>
        </div>

        <details class="code-block">
          <summary>Core Code (feature prep + model + SHAP)</summary>
<pre><code class="language-py">import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_recall_curve
from xgboost import XGBClassifier
import shap

X = df.drop(columns=["churn"])
y = df["churn"].astype(int)

X = pd.get_dummies(X, drop_first=True)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42)

clf = XGBClassifier(
    n_estimators=400, max_depth=4, learning_rate=0.06,
    subsample=0.9, colsample_bytree=0.9, reg_lambda=1.0, random_state=42
)
clf.fit(X_train, y_train)

explainer = shap.TreeExplainer(clf)
shap_values = explainer(X_test)
# shap.plots.beeswarm(shap_values)  # figure saved below
</code></pre>
          <button class="copy-btn" data-target="prev">Copy</button>
        </details>

        <div class="figs">
          <!-- 把你的图放到 assets/projects/churn/ 目录 -->
          <figure>
            <img src="assets/projects/churn/roc.png" alt="ROC curve" />
            <figcaption>ROC curve</figcaption>
          </figure>
          <figure>
            <img src="assets/projects/churn/shap_beeswarm.png" alt="SHAP beeswarm" />
            <figcaption>Top drivers (SHAP)</figcaption>
          </figure>
        </div>
      </article>

      <!-- Project 2 -->
      <article class="project-card">
        <div class="project-head">
          <h2>Pricing Elasticity via Difference-in-Differences</h2>
          <p class="muted">Causal inference · Event-study checks</p>
        </div>

        <p class="project-blurb">
          Estimated the causal effect of discounting on sales. Ran DiD with robust SEs and placebo tests; validated parallel trends with event-study.
        </p>

        <ul class="tech-tags">
          <li>R</li><li>tidyverse</li><li>fixest</li><li>did</li>
        </ul>

        <div class="actions">
          <a class="btn" href="https://github.com/yourname/diff-in-diff" target="_blank" rel="noopener">GitHub Repo</a>
          <a class="btn ghost" href="#" target="_blank" rel="noopener">Notebook</a>
        </div>

        <details class="code-block">
          <summary>Core Code (DiD w/ fixed effects)</summary>
<pre><code class="language-r">library(fixest)
# y = log(sales), treat = discounted, post = after promo
did_model &lt;- feols(y ~ i(post, treat, ref = 0) | store + week, data = df, cluster = "store")
etable(did_model)
</code></pre>
          <button class="copy-btn" data-target="prev">Copy</button>
        </details>

        <div class="figs">
          <figure>
            <img src="assets/projects/did/event_study.png" alt="Event study plot" />
            <figcaption>Event-study (parallel trends check)</figcaption>
          </figure>
          <figure>
            <img src="assets/projects/did/placebo.png" alt="Placebo test" />
            <figcaption>Placebo test</figcaption>
          </figure>
        </div>
      </article>

      <!-- Project 3 -->
      <article class="project-card">
        <div class="project-head">
          <h2>Sales Forecasting</h2>
          <p class="muted">Hybrid ARIMA + Gradient Boosting</p>
        </div>

        <p class="project-blurb">
          Combined classical time-series with ML to reduce MAPE by 12% vs. seasonal benchmark; included holiday & promo features.
        </p>

        <ul class="tech-tags">
          <li>Python</li><li>pandas</li><li>statsmodels</li><li>LightGBM</li>
        </ul>

        <div class="actions">
          <a class="btn" href="https://github.com/yourname/forecasting" target="_blank" rel="noopener">GitHub Repo</a>
          <a class="btn ghost" href="#" target="_blank" rel="noopener">Report</a>
        </div>

        <details class="code-block">
          <summary>Core Code (hybrid pipeline)</summary>
<pre><code class="language-py">from statsmodels.tsa.statespace.sarimax import SARIMAX
import lightgbm as lgb

# 1) SARIMA residuals
sarima = SARIMAX(y, order=(1,1,1), seasonal_order=(1,1,1,7)).fit()
resid = y - sarima.fittedvalues

# 2) ML on features to explain residuals
dtrain = lgb.Dataset(X_train, label=resid.loc[X_train.index])
gbm = lgb.train({"objective":"regression"}, dtrain, num_boost_round=400)

# 3) Final forecast = sarima_forecast + ml_correction
</code></pre>
          <button class="copy-btn" data-target="prev">Copy</button>
        </details>

        <div class="figs">
          <figure>
            <img src="assets/projects/forecast/actual_vs_pred.png" alt="Actual vs Predicted" />
            <figcaption>Actual vs. Predicted</figcaption>
          </figure>
        </div>
      </article>

    </section>
  </main>

  <script>
    // 简易“复制代码”按钮
    document.querySelectorAll('.copy-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const target = btn.dataset.target === 'prev'
          ? btn.previousElementSibling
          : document.querySelector(btn.dataset.target);
        const text = target ? target.innerText : '';
        navigator.clipboard.writeText(text).then(() => {
          const old = btn.textContent;
          btn.textContent = 'Copied!';
          setTimeout(() => btn.textContent = old, 1200);
        });
      });
    });
  </script>
</body>
</html>
